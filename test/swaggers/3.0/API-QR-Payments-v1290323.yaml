openapi: 3.0.0
info:
  title: API-QR-Payments
  description: API to make payments with QR code
  version: v1
  contact:
    name: TowerTech
    url: 'https://towertech-americas.webnode.page/'
    email: soporteingenieria@towertechamericas.co
servers:
  - url: 'https://api-qa-transapp.towertechamericas.co/api-qr-payments/v1'
    description: qa-environments
tags:
  - name: Users
    description: Operations and resources related to users
  - name: Validators
    description: Operations and resources related to validations
  - name: Notifications
    description: Operations and resources related to notifications
  - name: FAQs
    description: Operations and resources related to faqs
  - name: Legal
    description: Operations and resources related to legal
  - name: Monitoring
    description: Operations and resources related to monitoring
paths:
  /daviplata-poc-users/{documentNumber}:
    parameters:
      - name: documentNumber
        in: path
        schema:
          $ref: '#/components/schemas/documentNumber'
        required: true
    get:
      summary: Search user in Daviplata's Proof of Concept by document number
      description: Allows search user in Daviplata's Proof of Concept by document number
      operationId: searchUserInPoC
      tags:
        - Users
      parameters:
        - name: documentType
          in: query
          schema:
            $ref: '#/components/schemas/documentType'
          examples:
            'Juan Peréz':
              value: CC
          required: true
      responses:
        '201':
          description: Created
          headers:
            location:
              description: Resource location
              schema:
                $ref: '#/components/schemas/locationHeader'
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/pocUser'
              examples:
                'Available user':
                  value:
                    data:
                      id: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                      documentNumber: '1034674321'
                      documentType: CC
                      phone: '+573151221334'
                      status: available
                'Unavailable user':
                  value:
                    data:
                      id: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                      documentNumber: '1034674321'
                      documentType: CC
                      phone: '+573151221334'
                      status: unavailable
                'Registered user':
                  value:
                    data:
                      id: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                      documentNumber: '1034674321'
                      phone: '+573151221334'
                      documentType: CC
                      status: registered
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'  
  /verification-codes:
    post:
      summary: Generate verification code
      description: Allows gnerate verification code
      operationId: generateVerificationCode
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  oneOf:
                    - $ref: '#/components/schemas/email'
                    - $ref: '#/components/schemas/phone'
                type:
                  type: string
                  enum:
                    - email
                    - phone
              required:
                - to
                - type
            examples:
              'Email verification':
                value:
                  to: juanperez@gmail.com
                  type: email
      responses:
        '202':
          description: Accepted
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
            accept-language:
              description: Response language
              schema:
                type: string
                pattern: ([^-;]*)(?:-([^;]*))?(?:;q=([0-9]\.[0-9]))?
                minLength: 2
                maxLength: 14
                example: es-ES
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            minLength: 20
                            maxLength: 200
                            example: 'Si el correo electrónico ingresado es válido se envíara un mensaje con el código de verificación.'
                        required:
                          - message
              examples:
                'Email verification':
                  value:
                    data:
                      message: 'Si el correo electrónico ingresado es válido se envíara un mensaje con el código de verificación.'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /verification-codes/{verificationCode}:
    parameters:
      - name: verificationCode
        in: path
        schema:
          $ref: '#/components/schemas/verificationCode'
        required: true
        examples:
          'Email verification':
            value: '123456'
    get:
      summary: Validate the verification code
      description: Allows validate the verification code
      operationId: validateVerificationCode
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              'Juan Peréz':
                value: {}
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          verificationCode:
                            $ref: '#/components/schemas/verificationCode'
                          validated:
                            type: boolean
                            example: true
                        required:
                          - verificationCode
                          - validated
              examples:
                'Email verification':
                  value:
                    data:
                      verificationCode: '123456'
                      validated: true
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /users:
    post:
      summary: Register users
      description: Allows register a user
      operationId: registerUser
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreateData'
            examples:
              'Juan Peréz':
                value:
                  documentType: CC
                  documentNumber: '1034674321'
                  fullName: Juan Peréz
                  age: 30
                  email: juanperez@gmail.com
                  phone: '+573151221334'
                  consentTermsAndConditions: true
                  consentTreatmentPersonalData: true
                  deviceId: da42d671-16fc-4035-b55e-f9fbbb40165b
                  password: Dog1234$
                  verificationCode: '123456'
      responses:
        '201':
          description: Created
          headers:
            location:
              description: Resource location
              schema:
                $ref: '#/components/schemas/locationHeader'
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
              examples:
                'Juan Peréz':
                  value:
                    data:
                      id: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                      documentNumber: '1034674321'
                      documentType: CC
                      fullName: Juan Peréz
                      age: 30
                      email: juanperez@gmail.com
                      phone: '+573151221334'
                      consentTermsAndConditions: true
                      consentTreatmentPersonalData: true
                      devices:
                        - da42d671-16fc-4035-b55e-f9fbbb40165b
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /login:
    post:
      summary: User login
      description: Allows user login and obtain their data
      operationId: userLogin
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLoginData'
            examples:
              'Juan Peréz':
                value:
                  documentType: CC
                  documentNumber: '34938428'
                  deviceId: da42d671-16fc-4035-b55e-f9fbbb40165b
                  password: Dog1234$
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/accessTokenData'
              examples:
                'Juan Peréz':
                  value:
                    data:
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      tokenType: Bearer
                      expiresIn: 3600
                      refreshToken: eyJraWQiOiJjcGltY29yZV8wOTI1MjAxNSIsInZlciI6IjEuMCIsInppcCI6IkRlZmxhdGUiLCJzZXIiOiIxLjAifQ..HUFVeDqXqUODvNas.CHzdySFyWSPOFBFIb2GuJpVO3biX3waZs78oGjq-2yx9DHX_D49Cr9RKAUwkibd6t3kooxTmlKNsaQo1lOxfBm9MUdEoHQ1IxmAj-Witbc6XSHAYDZSyRpp_vnxs2lOqWkPFBrmwTSWz_JklZiOfI56WwDJvntOJ0JApMUrB_zuAGXM3YpO0zuTzva97nh-8bQD88-TD6KcE4LYBl2spuRqRex41RTx4ZgEeYxuICJDRBuNvd-D7nWGBGN4jYGAIPTHeqAhl6BMi85mbAspKzJnrftNpTSVN4yQ0jzqLx8dJ23FcYCITvRY8-aN-A_WfKhuh40kw0XRMvvseywO3ISbKgvjyZTZtkoMYZ1sK4T7Vp6TSNBKlzBudevLmzIUV3xIO7_ccSC8gVrvR_tTgsF18mEv_u7s7RzCz9OspOKaFZ4iGCbQyLNk3HEulNFbcMfa_0qyu51sPmHC0tADfADguN3CZ52060ylchc0I-03BU81rY0OdBI-4cCEZSjuEKr_TEQ_gKuYkKhGNth2dMJR258XFx0zdE1gK3ze03pR9RE5x6UGC4vCh4Llo5R0IaKEhg16Qrwi-qL0yT-5bdBcabqglWFYHWbPoUDSkYNvP0Bx7IcmvcaDySidhfw5awKBf3xVXUj4CjLrTXM14Sf6c80-EEJJmeszMB8y6FdoqlIknFC5QXJ6cOhDXxtS_k_gGT2YDlQif3GTOoXAm.pGhbTTyFehVKq7tQcAFlVA
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /password-reset-codes:
    post:
      summary: Generate code to reset password
      description: Allows generate code to reset password
      operationId: generatePasswordResetCode
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordResetCodeGeneration'
            examples:
              'Juan Peréz':
                value:
                  documentType: CC
                  documentNumber: '34938428'
      responses:
        '202':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
            accept-language:
              description: Response language
              schema:
                type: string
                pattern: ([^-;]*)(?:-([^;]*))?(?:;q=([0-9]\.[0-9]))?
                minLength: 2
                maxLength: 14
                example: es-ES
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            $ref: '#/components/schemas/userId'
                        required:
                          - userId
              examples:
                'Juan Peréz':
                  value:
                    data:
                      userId: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /users/{userId}/passwords:
    parameters:
      - name: userId
        in: path
        schema:
          $ref: '#/components/schemas/userId'
        required: true
    patch:
      summary: Generate code to reset password
      description: Allows generate code to reset password
      operationId: updatePassword
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userResetPasswordData'
            examples:
              'Juan Peréz':
                value:
                  verificationCode: '123456'
                  password: Dog1234$
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
            accept-language:
              description: Response language
              schema:
                type: string
                pattern: ([^-;]*)(?:-([^;]*))?(?:;q=([0-9]\.[0-9]))?
                minLength: 2
                maxLength: 14
                example: es-ES
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            $ref: '#/components/schemas/userId'
                        required:
                          - userId
              examples:
                'Juan Peréz':
                  value:
                    data:
                      userId: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /users/me/tickets:
    get:
      summary: Retrieve list of user tickets
      description: Allows retrieve list of user tickets
      operationId: retrieveUserTickets
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/initParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/totalParam'
        - $ref: '#/components/parameters/orderByParam'
        - $ref: '#/components/parameters/selectParam'
        - $ref: '#/components/parameters/excludeParam'
        - $ref: '#/components/parameters/expandParam'
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '206':
          description: Partial Content
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardPaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tickets:
                            type: array
                            items:
                              $ref: '#/components/schemas/ticket'
              examples:
                'Tickets':
                  value:
                    paging:
                      init: 1
                      limit: 10
                      links:
                        self:
                          href: "/users/me/tickets?init=1&limit=10&total=false"
                        first:
                          href: "/users/me/tickets?init=1&limit=10&total=false"
                        previous: null
                        next:
                          href: "/users/me/tickets?init=11&limit=10&total=false"
                    data:
                      tickets:
                        - id: 8b27a496-366f-47d6-b17b-e9d152b8de71
                          datetime: '2022-10-10 15:45:16'
                          price:
                            currency: COP
                            amount: 159004.65
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /users/me/settings:
    get:
      summary: Retrieve user settings
      description: Allows retrieve user settings
      operationId: retrieveUserSettings
      tags:
        - Users
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userSettings'
              examples:
                'Juan Peréz settings':
                  value:
                    data:
                      maximumOfflineAuthorizations: 5
                      maximumTicketsPerAuthorization: 5 
                      maximumOfflineTime: 3600
                      qrCodeAutoChangeTime: 3600
                      qrCodeRefreshTime: 3600
                      authorizationDuration: 3600
                      rsaPublicKeysQrCodeEncryption: MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ct bT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=
                      userId: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                      walletId: 8844fe44-597d-48d6-903b-8365e7e0cdc3
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
    post:
      summary: Create user settings
      description: Allows create user settings
      operationId: createUserSettings
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSettings'
            examples:
              'Juan Peréz Settings':
                  value:
                    maximumOfflineAuthorizations: 5
                    maximumTicketsPerAuthorization: 5 
                    maximumOfflineTime: 3600
                    qrCodeAutoChangeTime: 3600
                    qrCodeRefreshTime: 3600
                    authorizationDuration: 3600
                    rsaPublicKeysQrCodeEncryption: MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ct bT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=
                    userId: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                    walletId: 8844fe44-597d-48d6-903b-8365e7e0cdc3
      responses:
        '201':
          description: Created
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userSettings'
              examples:
                'Juan Peréz Settings':
                  value:
                    data:
                      maximumOfflineAuthorizations: 5
                      maximumTicketsPerAuthorization: 5 
                      maximumOfflineTime: 3600
                      qrCodeAutoChangeTime: 3600
                      qrCodeRefreshTime: 3600
                      authorizationDuration: 3600
                      rsaPublicKeysQrCodeEncryption: MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ct bT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=
                      userId: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                      walletId: 8844fe44-597d-48d6-903b-8365e7e0cdc3
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
    patch:
      summary: Update user settings
      description: Allows update user settings
      operationId: updateUserSettings
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSettings'
            examples:
              'Juan Peréz Settings':
                  value:
                    maximumOfflineAuthorizations: 5
                    maximumTicketsPerAuthorization: 5 
                    maximumOfflineTime: 3600
                    qrCodeAutoChangeTime: 3600
                    qrCodeRefreshTime: 3600
                    authorizationDuration: 3600
                    rsaPublicKeysQrCodeEncryption: MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ct bT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=
                    userId: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                    walletId: 8844fe44-597d-48d6-903b-8365e7e0cdc3
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userSettings'
              examples:
                'Juan Peréz Settings':
                  value:
                    data:
                      maximumOfflineAuthorizations: 5
                      maximumTicketsPerAuthorization: 5 
                      maximumOfflineTime: 3600
                      qrCodeAutoChangeTime: 3600
                      qrCodeRefreshTime: 3600
                      authorizationDuration: 3600
                      rsaPublicKeysQrCodeEncryption: MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ct bT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=
                      userId: 7f7aaa9a-8c62-4362-92fb-c652aa07823b
                      walletId: 8844fe44-597d-48d6-903b-8365e7e0cdc3
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /notifications:
    get:
      summary: Retrieve notifications of uncollected tickets
      description: Allows retrieve notifications of uncollected tickets
      operationId: retrieveUncollectedTicketsNotifications
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/initParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/totalParam'
        - $ref: '#/components/parameters/orderByParam'
        - $ref: '#/components/parameters/selectParam'
        - $ref: '#/components/parameters/excludeParam'
        - $ref: '#/components/parameters/expandParam'
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '206':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardPaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          uncollectedTickets:
                            type: array
                            items:
                              $ref: '#/components/schemas/ticket'
              examples:
                'Uncollected tickets':
                  value:
                    paging:
                      init: 1
                      limit: 10
                      links:
                        self:
                          href: "/uncollected-tickets-notifications?init=1&limit=10&total=false"
                        first:
                          href: "/uncollected-tickets-notifications?init=1&limit=10&total=false"
                        previous: null
                        next:
                          href: "/uncollected-tickets-notifications?init=11&limit=10&total=false"
                    data:
                      uncollectedTickets:
                      - id: 550e8400-e29b-41d4-a716-446655441234
                        datetime: '2022-10-10 14:59:25'
                        price:
                          currency: COP
                          amount: 153168351.12
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /faqs:
    post:
      summary: Create an FAQ record (question with its answer)
      description: Allows create an FAQ record (question with its answer)
      operationId: createFaqRecord
      tags:
        - FAQs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faqRecordCreateData'
            examples:
              'FAQ 1':
                value:
                  question: First question?
                  answer: First answer
      responses:
        '201':
          description: Created
          headers:
            location:
              description: Resource location
              schema:
                $ref: '#/components/schemas/locationHeader'
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/faqRecord'
              examples:
                'FAQ 1':
                  value:
                    data:
                      id: dab88594-54d7-40a4-a26e-dd1b7d6b82fd
                      question: First question?
                      answer: First answer
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
    get:
      summary: Retrieve FAQs
      description: Allows retrieve FAQs
      operationId: retrieveFaqs
      tags:
        - FAQs
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      faqs:
                        type: array
                        items:
                          $ref: '#/components/schemas/faqRecord'
              examples:
                'FAQs':
                  value:
                    data:
                      faqs:
                        - id: dab88594-54d7-40a4-a26e-dd1b7d6b82fd
                          question: Fisrt question?
                          answer: Fisrt answer
                        - id: 73af603d-71c8-4bc7-92a2-6617b7f91634
                          question: Second question?
                          answer: Second answer
                        - id: 9a9d3c2d-df70-416a-afbd-4008ea17796a
                          question: Third question?
                          answer: Third answer
                        - id: c14d21ec-7fb3-4449-bf24-3434aa834142
                          question: Fourth question?
                          answer: Fourth answer
                        - id: 75cc2a93-4edb-4fcf-8518-28804d4ad6b6
                          question: Fifth question?
                          answer: Fifth answer
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /faqs/{faqId}:
    parameters:
      - name: faqId
        in: path
        schema:
          $ref: '#/components/schemas/uuid'
        required: true
        examples:
          'FAQ 1':
            value: dab88594-54d7-40a4-a26e-dd1b7d6b82fd
    patch:
      summary: Update an FAQ record
      description: Allows update a question with its answer
      operationId: updateFaqRecord
      tags:
        - FAQs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faqRecordPartialUpdateData'
            examples:
              'FAQ 1':
                value:
                  answer: Firt response
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/faqRecord'
              examples:
                'FAQ 1':
                  value:
                    data:
                      id: dab88594-54d7-40a4-a26e-dd1b7d6b82fd
                      question: First question?
                      answer: First response
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
    delete:
      summary: Delete FAQ record
      description: Allows delete FAQ record
      operationId: deleteFaqRecord
      tags:
        - FAQs
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/faqRecord'
              examples:
                'FAQ 1':
                  value:
                    data:
                      id: dab88594-54d7-40a4-a26e-dd1b7d6b82fd
                      question: First question?
                      answer: First response
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /legal-aspects:
    get:
      summary: Retrieve legal aspects
      description: Allows retrieve legal aspects
      operationId: retrieveLegalAspects
      tags:
        - Legal
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      legalAspects:
                        type: array
                        items:
                          $ref: '#/components/schemas/legalAspect'
              examples:
                'Legal aspects':
                  value:
                    data:
                      legalAspects:
                        - id: ffebf9cc-f849-495f-8df1-d8d128c709fa
                          name: Terms and conditions
                          text: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
    post:
      summary: Create legal aspects
      description: Allows create legas aspects
      operationId: createLegalAspects
      tags:
        - Legal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/legalAspectCreateData'
            examples:
              'Terms and conditions':
                value:
                  name: terms and conditions
                  text: text of example
      responses:
        '201':
          description: Created
          headers:
            location:
              description: Resource location
              schema:
                $ref: '#/components/schemas/locationHeader'
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/legalAspect'
              examples:
                'Terms and conditions':
                  value:
                    data:
                      id: ffebf9cc-f849-495f-8df1-d8d128c709fa
                      name: terms and conditions
                      text: text of example
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /legal-aspects/{legalAspectId}:
    parameters:
      - name: legalAspectId
        in: path
        schema:
          $ref: '#/components/schemas/uuid'
        required: true
        examples:
          'Terms and conditions':
            value: ffebf9cc-f849-495f-8df1-d8d128c709fa
    patch:
      summary: Update legal aspects
      description: Allows update legal aspects
      operationId: updateLegalAspects
      tags:
        - Legal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/legalAspectPartialUpdateData'
            examples:
              'Terms and conditions':
                value:
                  text: Text of example...
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/legalAspect'
              examples:
                'Terms and conditions':
                  value:
                    data:
                      id: ffebf9cc-f849-495f-8df1-d8d128c709fa
                      name: Terms and conditions
                      text: Text of example...
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '415':
          $ref: '#/components/responses/unsupportedMediaTypeResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
    delete:
      summary: Remove legal aspects
      description: ' '
      operationId: delete-legal-legal_id
      tags:
        - Legal
      responses:
        '200':
          description: OK
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/legalAspect'
              examples:
                'Terms and conditions':
                  value:
                    data:
                      id: 550e8400-e29b-41d4-a716-446655441234
                      name: terms and conditions
                      text: text of example
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
  /status:
    get:
      summary: API monitoring endpoint.
      description: | 
        This is a response proposal for the **/status** endpoint specified on RecordGo API definition standard.
        The endpoint should check API involved systems (such as databases or external backends) as well as API responses to given requests. 
        There are two arrays to be fulfilled: the _systems_ array and the _requests_ array. 
        Each of them will contain the systems checks and the API calls checks.
      operationId: getStatus
      tags:
      - Monitoring
      responses:
        '200':
          description: Status response
          headers:
            x-trace-id:
              description: Trace ID to track the request through the system
              schema:
                $ref: '#/components/schemas/uuid'
            x-request-id:
              description: Request ID to identify the request
              schema:
                $ref: '#/components/schemas/uuid'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/standardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/status'
              examples:
                Status:
                  value:
                    data:
                      systems:
                      - system: database
                        status: true
                      requests:
                      - request: "/resources"
                        status: true
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '403':
          $ref: '#/components/responses/forbiddenResponse'
        '429':
          $ref: '#/components/responses/tooManyRequestsResponse'
        '503':
          $ref: '#/components/responses/serviceUnavailableResponse'
        default:
          $ref: '#/components/responses/internalServerErrorResponse'
components:
  parameters:
    initParam:
      in: query
      name: $init
      description: |
        Initial record to be shown in the list. 
        * Minimum value: 1
        * Maximum value: Total of records
      example: 10
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    limitParam:
      in: query
      name: $limit
      description: |
        Maximum number of records per page.
        * Minimum value: 1
        * Maximum value: 250
      example: 10
      schema:
        type: integer
        format: int32
        default: 25
        minimum: 1
        maximum: 250
    totalParam:
      in: query
      name: $total
      description: |
        Indicates whether the _total_ and _total_pages_ attributes should be calculated and returned in the _metadata.paging_ object of the standard response.
      example: true
      schema:
        type: boolean
        default: false
    selectParam:
      in: query
      name: $select
      schema:
        type: array
        minItems: 1
        maxItems: 100
        items:
          type: string
      description: |
        Allows you to select the attributes of the resource that you want to obtain in the query.
        It is recommended for use when you only want to obtain a few attributes from a complex resource.
        It can be specified as an array of attributes.
      example: [id,long_description,type]
    excludeParam:
      in: query
      name: $exclude
      schema:
        type: array
        items:
          type: string
        minItems: 1
        maxItems: 100
      description: |
        Allows you to exclude certain attributes of the resource.
        It is recommended for use when you want to exclude some attributes from a complex resource.
        It can be specified as an array of attributes.
      example: [id,type]
    expandParam:
      in: query
      name: $expand
      schema:
        type: array
        minItems: 1
        maxItems: 100
        items:
          type: string
      description: |  
        Indicates a list of sub-attributes that you want to expand.
        It can be specified as an array of attributes.
      example: [subcategories,typeName]
    orderByParam:
      in: query
      name: $orderby
      schema:
        type: array
        minItems: 1
        maxItems: 100
        items:
          type: string
      description: |
        It allows to indicate the ordering criteria of a query.
        It can be specified as an array of attributes.
      example: [date desc]
  schemas:
    standardError:
      type: object
      properties:
        code:
          type: string
          minLength: 2
          maxLength: 20
          description: Error code
          example: SERR100
        message:
          type: string
          minLength: 2
          maxLength: 250
          description: Error message
          example: Error message
        field:
          type: string
          minLength: 2
          maxLength: 100
          description: Field with the error
          example: username
        traceId:
          description: Trace identificator
          type: string
          format: uuid
          minLength: 36
          maxLength: 36
          pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
          example: e3613ba0-ca8f-11ec-9d64-0242ac120002
      required:
        - code
        - message
    standardPagingLink:
      type: object
      nullable: true
      properties:
        href:
          type: string
          minLength: 10
          maxLength: 2048
          description: URL encoded link
          example: '/resources?init=1&limit=25&total=false'
    standardPaging:
      type: object
      description: Pagination information object
      properties:
        init:
          type: integer
          format: int32
          description: Initial record of the page
          example: 1
        limit:
          type: integer
          format: int32
          description: Number of records per page
          example: 25
        total:
          type: integer
          format: int32
          description: Total number of records
          example: 35
        links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/standardPagingLink'
            first:
              $ref: '#/components/schemas/standardPagingLink'
            previous:
              $ref: '#/components/schemas/standardPagingLink'
            next:
              $ref: '#/components/schemas/standardPagingLink'
            last:
              $ref: '#/components/schemas/standardPagingLink'
          required:
            - previous
            - next
            - self
      required:
        - init
        - limit
        - links
    standardResponse:
      type: object
      properties:
        data:
          anyOf:
            - type: object
            - type: array
              items:
                type: object
        result:
          type: object
      required:
        - data
    standardErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/standardError'
      required:
        - errors
    standardPaginatedResponse:
      allOf:
        - $ref: '#/components/schemas/standardResponse'
        - type: object
          properties:
            paging:
              $ref: '#/components/schemas/standardPaging'
      required:
        - paging
        - data
    uuid:
      type: string
      description: UUID
      format: uuid
      minLength: 36
      maxLength: 36
      pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
      example: 62977d46-7a50-41c9-8d84-38272ac2a8df
      readOnly: true
    locationHeader:
      type: string
      maxLength: 2048
      pattern: ^(?:(?:((http|https):\/\/)?[^\/]+))?(?:\/|^)((?:[^#\.\/:?\n\r]+\/?)+(?=\?|#|$|\.|\/))$
      example: '/resources/acd0df8b-651a-4e8b-aeb3-a448408d90fb'
    pocUserId:
      allOf:
        - $ref: '#/components/schemas/uuid'
      description: PoC user identifier
      example: d5a2b7f4-c22d-4d53-9da4-f5600cc78788
    verificationCode:
      type: string
      minLength: 6
      maxLength: 6
      pattern: ^([0-9]{6})$
      example: '060884'
    userId:
      allOf:
        - $ref: '#/components/schemas/uuid'
      description: User identifier
      example: 400b0296-4beb-4164-ac98-f6187861eaff
    deviceId:
      allOf:
        - $ref: '#/components/schemas/uuid'
      description: Device identifier
      example: da42d671-16fc-4035-b55e-f9fbbb40165b
    documentType:
      type: string
      minLength: 2
      maxLength: 50
      example: CC
    documentNumber:
      type: string
      minLength: 2
      maxLength: 20
      example: '1034674321'
    fullName:
      type: string
      description: First name
      minLength: 2
      maxLength: 300
      pattern: "^[A-Za-zàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð\\s'-]+$"
      example: Juan Peréz
    age:
      type: number
      format: int32
      minimum: 18
      maximum: 110
      example: 30
    email:
      type: string
      description: Email
      format: email
      minLength: 8
      maxLength: 320
      pattern: '^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$'
      example: juanperez@gmail.com
    phone:
      type: string
      description: phone
      minLength: 10
      maxLength: 13
      pattern: '[+]?[0-9]{2}[0-9]{10}$'
      example: '+573151221334'
    password:
      type: string
      minLength: 8
      maxLength: 20
      format: password
      pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,20}$'
      example: Dog1234$
    consentTermsAndConditions:
      type: boolean
      description: User consent to the terms and conditions
      example: true
    consentTreatmentPersonalData:
      type: boolean
      description: User consent to the treatment personal data
      example: true
    pocUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/pocUserId'
        documentType:
          $ref: '#/components/schemas/documentType'
        documentNumber:
          $ref: '#/components/schemas/documentNumber'
        phone:
          $ref: '#/components/schemas/phone'
        status:
          type: string
          enum:
            - available
            - unavailable
            - registered
      required:
        - id
        - documentType
        - documentNumber
        - phone
        - status
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        documentType:
          $ref: '#/components/schemas/documentType'
        documentNumber:
          $ref: '#/components/schemas/documentNumber'
        fullName:
          $ref: '#/components/schemas/fullName'
        age:
          $ref: '#/components/schemas/age'
        email:
          $ref: '#/components/schemas/email'
        phone:
          $ref: '#/components/schemas/phone'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/deviceId'
          example:
            - da42d671-16fc-4035-b55e-f9fbbb40165b
      required:
        - id
        - documentType
        - documentNumber
        - fullName
        - age
        - email
        - phone
        - devices
    userCreateData:
      type: object
      properties:
        documentType:
          $ref: '#/components/schemas/documentType'
        documentNumber:
          $ref: '#/components/schemas/documentNumber'
        fullName:
          $ref: '#/components/schemas/fullName'
        age:
          $ref: '#/components/schemas/age'
        email:
          $ref: '#/components/schemas/email'
        phone:
          $ref: '#/components/schemas/phone'
        consentTermsAndConditions:
          $ref: '#/components/schemas/consentTermsAndConditions'
        consentTreatmentPersonalData:
          $ref: '#/components/schemas/consentTreatmentPersonalData'
        device:
          $ref: '#/components/schemas/deviceId'
        password:
          $ref: '#/components/schemas/password'
        verificationCode:
          $ref: '#/components/schemas/verificationCode'
      required:
        - documentType
        - documentNumber
        - fullName
        - email
        - phone
        - password
        - deviceId
        - verificationCode
        - consentTermsAndConditions
        - consentTreatmentPersonalData
    userLoginData:
      type: object
      properties:
        documentType:
          $ref: '#/components/schemas/documentType'
        documentNumber:
          $ref: '#/components/schemas/documentNumber'
        deviceId:
          $ref: '#/components/schemas/deviceId'
        password:
          $ref: '#/components/schemas/password'
      required:
        - documentType
        - documentNumber
        - deviceId
        - password
    jwt:
      type: string
      pattern: ^([A-Za-z0-9-_]*\.[A-Za-z0-9-_]*\.[A-Za-z0-9-_]*)$
      minLength: 84
      maxLength: 2048
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    accessTokenData:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/jwt'
        tokenType:
          type: string
          enum:
            - Bearer
          minLength: 6
          maxLength: 6
          example: Bearer
        expiresIn:
          type: number
          format: int32
          minimum: 120
          maximum: 3600
        refreshToken:
          type: string
          pattern: ^([A-Za-z0-9-_\.]*)$
          minLength: 84
          maxLength: 1024
          example: eyJraWQiOiJjcGltY29yZV8wOTI1MjAxNSIsInZlciI6IjEuMCIsInppcCI6IkRlZmxhdGUiLCJzZXIiOiIxLjAifQ..HUFVeDqXqUODvNas.CHzdySFyWSPOFBFIb2GuJpVO3biX3waZs78oGjq-2yx9DHX_D49Cr9RKAUwkibd6t3kooxTmlKNsaQo1lOxfBm9MUdEoHQ1IxmAj-Witbc6XSHAYDZSyRpp_vnxs2lOqWkPFBrmwTSWz_JklZiOfI56WwDJvntOJ0JApMUrB_zuAGXM3YpO0zuTzva97nh-8bQD88-TD6KcE4LYBl2spuRqRex41RTx4ZgEeYxuICJDRBuNvd-D7nWGBGN4jYGAIPTHeqAhl6BMi85mbAspKzJnrftNpTSVN4yQ0jzqLx8dJ23FcYCITvRY8-aN-A_WfKhuh40kw0XRMvvseywO3ISbKgvjyZTZtkoMYZ1sK4T7Vp6TSNBKlzBudevLmzIUV3xIO7_ccSC8gVrvR_tTgsF18mEv_u7s7RzCz9OspOKaFZ4iGCbQyLNk3HEulNFbcMfa_0qyu51sPmHC0tADfADguN3CZ52060ylchc0I-03BU81rY0OdBI-4cCEZSjuEKr_TEQ_gKuYkKhGNth2dMJR258XFx0zdE1gK3ze03pR9RE5x6UGC4vCh4Llo5R0IaKEhg16Qrwi-qL0yT-5bdBcabqglWFYHWbPoUDSkYNvP0Bx7IcmvcaDySidhfw5awKBf3xVXUj4CjLrTXM14Sf6c80-EEJJmeszMB8y6FdoqlIknFC5QXJ6cOhDXxtS_k_gGT2YDlQif3GTOoXAm.pGhbTTyFehVKq7tQcAFlVA
      required:
        - accessToken
        - expiresIn
        - tokenType
        - refreshToken
    passwordResetCodeGeneration:
      type: object
      properties:
        documentType:
          $ref: '#/components/schemas/documentType'
        documentNumber:
          $ref: '#/components/schemas/documentNumber'
      required:
        - documentType
        - documentNumber
    userResetPasswordData:
      type: object
      properties:
        verificationCode:
          $ref: '#/components/schemas/verificationCode'
        password:
          $ref: '#/components/schemas/password'
      required:
        - verificationCode
        - password
    ticketId:
      allOf:
        - $ref: '#/components/schemas/uuid'
      description: Ticket identifier
      example: 8b27a496-366f-47d6-b17b-e9d152b8de71
    ticket:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ticketId'
        datetime:
          description: Datetime of the ticket
          type: string
          format: datetime
          maxLength: 19
          minLength: 19
          pattern: '^((?:20(?:2[2-9]|[3-9][0-9])|2[1-9][0-9][0-9]|[3-9][0-9][0-9][0-9])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) (0[0-9]|1[0-9]|2[0123])\:([012345][0-9])\:([012345][0-9]))$'
          example: '2035-12-20 23:59:59'
        price:
          type: object
          description: Price of the ticket
          properties:
            currency:
              type: string
              example: COP
              minLength: 3
              maxLength: 3
              pattern: ^([A-Z]{3})$
              description: Currency code (ISO-4217)
            amount:
              type: number
              format: double
              example: 150000.50
              minimum: 0
              maximum: 999999999.99
              multipleOf: 0.01
              description: Amount
          required:
            - currency
            - amount  
    walletId:
      allOf:
        - $ref: '#/components/schemas/uuid'
      description: Wallet identifier
      example: 400b0296-4beb-4164-ac98-f6187861eaff
    userSettings:
      type: object
      properties:
        maximumOfflineAuthorizations:
          type: number
          format: int32
          minimum: 1
          maximum: 5
          example: 2
        maximumTicketsPerAuthorization:
          type: number
          format: int32
          minimum: 1
          maximum: 5
          example: 2
        maximumOfflineTime:
          type: number
          format: int32
          minimum: 300
          maximum: 3600
          example: 300
        qrCodeAutoChangeTime:
          type: number
          format: int32
          minimum: 300
          maximum: 3600
          example: 300
        qrCodeRefreshTime:
          type: number
          format: int32
          minimum: 300
          maximum: 3600
          example: 300
        authorizationDuration:
          type: number
          format: int32
          minimum: 300
          maximum: 3600
          example: 300
        rsaPublicKeysQrCodeEncryption:
          type: string
          minLength: 20
          maxLength: 1024
          pattern: ([0-9A-Za-z])
          example: MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ct bT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=
        userId:
          $ref: '#/components/schemas/userId'
        walletId:
          $ref: '#/components/schemas/walletId'
      required:
        - maximumOfflineAuthorizations
        - maximumTicketsPerAuthorization
        - maximumOfflineTime
        - qrCodeAutoChangeTime
        - qrCodeRefreshTime
        - authorizationDuration
        - rsaPublicKeysQrCodeEncryption
        - userId
        - walletId
    question:
      type: string
      minLength: 10
      maxLength: 250
      example: Fisrt question?
    answer:
      type: string
      minLength: 2
      maxLength: 250
      example: First answer
    faqRecord:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: FQA record identifier
          example: dab88594-54d7-40a4-a26e-dd1b7d6b82fd
        question:
          $ref: '#/components/schemas/question'
        answer:
          $ref: '#/components/schemas/answer'
      required:
        - id
        - question
        - answer
    faqRecordCreateData:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/question'
        answer:
          $ref: '#/components/schemas/answer'
      required:
        - question
        - answer
    faqRecordPartialUpdateData:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/question'
        answer:
          $ref: '#/components/schemas/answer'
    legalAspectName:
      type: string
      minLength: 10
      maxLength: 250
      example: Terms and conditions
    legalAspectText:
      type: string
      minLength: 10
      maxLength: 2064
      example: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.''
    legalAspect:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: Legal aspect identifier
          example: 45a31920-3a54-4d3e-a8f2-4e375d24d940
        name:
          $ref: '#/components/schemas/legalAspectName'
        text:
          $ref: '#/components/schemas/legalAspectText'
      required:
        - id
        - name
        - text
    legalAspectCreateData:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/legalAspectName'
        text:
          $ref: '#/components/schemas/legalAspectText'
      required:
        - name
        - text
    legalAspectPartialUpdateData:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/legalAspectName'
        text:
          $ref: '#/components/schemas/legalAspectText'
    system:
      type: object
      properties:
        system:
          type: string
          description: System name
          example: database
        status:
          type: boolean
          description: System status
          example: true
    request:
      type: object
      properties:
        request:
          type: string
          description: Endpoint url
          example: /resources
        status:
          type: boolean
          description: Request status
          example: true
    status:
      type: object
      properties:
        systems:
          type: array
          items:
            $ref: '#/components/schemas/system'
        requests:
          type: array
          items:
            $ref: '#/components/schemas/request'
  responses:
    noContentResponse:
      description: No content
      headers:
        X-Trace-ID:
          schema:
            type: string
          description: Trace ID to track the request through the system
        X-Request-ID:
          schema:
            type: string
          description: Request ID to track the request through the system
    badRequestResponse:
      description: Bad request
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Bad Request':
          #     value:
          #       errors:
          #         - code: '400'
          #           message: Bad request
          #           field: field
          #           traceId: 6ff801b6-ca90-11ec-9d64-0242ac120002
    unauthorizedResponse:
      description: Unauthorized
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Unauthorized':
          #     value:
          #       data: null
          #       errors:
          #         - code: '401'
          #           message: Unauthorized
    forbiddenResponse:
      description: Forbidden
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Forbidden':
          #     value:
          #       data: null
          #       errors:
          #         - code: '403'
          #           message: Forbidden
    notFoundResponse:
      description: Not found
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Not found':
          #     value:
          #       data: null
          #       errors:
          #         - code: '404'
          #           message: Not found
    unsupportedMediaTypeResponse:
      description: Unsupported Media Type
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Unsupported Media Type':
          #     value:
          #       data: null
          #       errors:
          #         - code: '415'
          #           message: Unsupported Media Type
    internalServerErrorResponse:
      description: Internal server error
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Internal server error':
          #     value:
          #       data: null
          #       errors:
          #         - code: '500'
          #           message: Internal server error
    serviceUnavailableResponse:
      description: Service unavailable
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Service unavailable':
          #     value:
          #       data: null
          #       errors:
          #         - code: '503'
          #           message: Service unavailable
    tooManyRequestsResponse:
      description: Too many requests
      headers:
        x-trace-id:
          description: Trace ID to track the request through the system
          schema:
            $ref: '#/components/schemas/uuid'
        x-request-id:
          description: Request ID to identify the request
          schema:
            $ref: '#/components/schemas/uuid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standardErrorResponse'
          # examples:
          #   'Z Too many requests':
          #     value:
          #       errors:
          #         - code: '429'
          #           message: Too many requests